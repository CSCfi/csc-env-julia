- name: "Install julia-jupyter environment"
  hosts:
    - "puhti"
    - "mahti"
    - "lumi"
  become: false

  tasks:
    - name: "Include variables"
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/version/{{ version }}.yaml"

    - name: "Create julia-jupyter application directory"
      ansible.builtin.file:
        path: "{{ appl_dir }}/julia-jupyter"
        state: "directory"
        mode: "ug=rwx,o=rx,g+s"
        group: "{{ group }}"

    - name: "Create julia-jupyter application directory"
      ansible.builtin.file:
        path: "{{ appl_dir }}/julia-jupyter/{{ version }}"
        state: "directory"
        mode: "ug=rwx,o=rx,g+s"
        group: "{{ group }}"

    - name: "Create Python virtual environment"
      ansible.builtin.command: |
        {{ ansible_python_interpreter }} -m venv "{{ version }}"
      args:
        chdir: "{{ appl_dir }}/julia-jupyter"
        creates: "{{ appl_dir }}/julia-jupyter/{{ version }}/bin"

    - name: "Upgrade pip to latest version. We pin the version manually for reproducibility."
      ansible.builtin.command: |
        ./{{ version }}/bin/pip install --upgrade pip==24.3.1
      args:
        chdir: "{{ appl_dir }}/julia-jupyter"

    - name: "Install packages to the virtual environment"
      ansible.builtin.command: |
        ./{{ version }}/bin/pip install {{ requirements }}
      args:
        chdir: "{{ appl_dir }}/julia-jupyter"
        creates: "{{ appl_dir }}/julia-jupyter/{{ version }}/bin/jupyter"

    - name: "Remove the default kernel"
      ansible.builtin.command: |
        ./{{ version }}/bin/jupyter kernelspec remove -y python3
      args:
        chdir: "{{ appl_dir }}/julia-jupyter"
        removes: "{{ appl_dir }}/julia-jupyter/{{ version }}/share/jupyter/kernels/python3"

    - name: "Ensure correct permissions to jupyter env"
      ansible.builtin.file:
        path: "{{ appl_dir }}/julia-jupyter/{{ version }}"
        mode: "u=rwX,g=rwX,o=rX"
        state: "directory"
        recurse: true

    - name: "Create julia-jupyter modulefiles directory"
      ansible.builtin.file:
        path: "{{ modulefiles_dir }}/julia-jupyter"
        state: "directory"
        mode: "ug=rwx,o=rx,g+s"
        group: "{{ group }}"

    - name: "Create a julia-jupyter module"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/julia-jupyter.lua.j2"
        dest: "{{ modulefiles_dir }}/julia-jupyter/{{ version }}.lua"
        mode: "ug=rw,o=r"
        group: "{{ group }}"

    # TODO: Verify that this block is no longer needed and remove.
    #- name: "Create symlink from env to the current version. Required for compatility with OOD scripts. We may remove the symlink later."
    #  ansible.builtin.file:
    #    src: "{{ version }}.lua"
    #    dest: "{{ modulefiles_dir }}/julia-jupyter/env.lua"
    #    state: "link"
    #    group: "{{ group }}"

    - name: "Create julia-jupyter binary directory"
      ansible.builtin.file:
        path: "{{ appl_dir }}/julia-jupyter/bin"
        state: "directory"
        mode: "ug=rwx,o=rx,g+s"
        group: "{{ group }}"

    - name: "Create script for installing IJulia.jl and kernel"
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/templates/install_ijulia_kernel.jl"
        dest: "{{ appl_dir }}/julia-jupyter/bin/install_ijulia_kernel.jl"
        mode: "ug=rwx,o=rx"
        group: "{{ group }}"

- name: "Synchronize across LUMI Lustres"
  hosts:
    - "lumi"
  become: false

  tasks:
    - name: "Create a julia application directory"
      ansible.builtin.file:
        path: "{{ item}}"
        state: "directory"
        mode: "ug=rwx,o=rx,g+s"
        group: "{{ group }}"
      loop:
        - "/pfs/lustrep1/{{ appl_dir }}/julia-jupyter"
        - "/pfs/lustrep3/{{ appl_dir }}/julia-jupyter"
        - "/pfs/lustrep4/{{ appl_dir }}/julia-jupyter"

    - name: "Synchronize binaries"
      ansible.builtin.command: |
        rsync --archive --delete "{{ item.src }}" "{{ item.dest }}"
      args:
        creates: "{{ item.dest }}/{{ version }}"
      loop:
        - src: "/pfs/lustrep2/{{ appl_dir }}/julia-jupyter/{{ version }}"
          dest: "/pfs/lustrep1/{{ appl_dir }}/julia-jupyter"
        - src: "/pfs/lustrep2/{{ appl_dir }}/julia-jupyter/{{ version }}"
          dest: "/pfs/lustrep3/{{ appl_dir }}/julia-jupyter"
        - src: "/pfs/lustrep2/{{ appl_dir }}/julia-jupyter/{{ version }}"
          dest: "/pfs/lustrep4/{{ appl_dir }}/julia-jupyter"

    - name: "Synchronize binaries"
      ansible.builtin.command: |
        rsync --archive --delete "{{ item.src }}" "{{ item.dest }}"
      args:
        creates: "{{ item.dest }}/bin"
      loop:
        - src: "/pfs/lustrep2/{{ appl_dir }}/julia-jupyter/bin"
          dest: "/pfs/lustrep1/{{ appl_dir }}/julia-jupyter"
        - src: "/pfs/lustrep2/{{ appl_dir }}/julia-jupyter/bin"
          dest: "/pfs/lustrep3/{{ appl_dir }}/julia-jupyter"
        - src: "/pfs/lustrep2/{{ appl_dir }}/julia-jupyter/bin"
          dest: "/pfs/lustrep4/{{ appl_dir }}/julia-jupyter"

    - name: "Synchronize modulefiles"
      ansible.builtin.command: |
        rsync --archive --delete "{{ item.src }}" "{{ item.dest }}"
      loop:
        - src: "/pfs/lustrep2/{{ modulefiles_dir }}/julia-jupyter"
          dest: "/pfs/lustrep1/{{ modulefiles_dir }}"
        - src: "/pfs/lustrep2/{{ modulefiles_dir }}/julia-jupyter"
          dest: "/pfs/lustrep3/{{ modulefiles_dir }}"
        - src: "/pfs/lustrep2/{{ modulefiles_dir }}/julia-jupyter"
          dest: "/pfs/lustrep4/{{ modulefiles_dir }}"
